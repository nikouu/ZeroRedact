@using System.Reflection

<div class="box">
    <div class="content">
        <h2 class="subtitle">@FunctionName</h2>
        <div class="field">
            <label class="label">Redaction type</label>
            <div class="control">
                <select class="select" style="width:100%" value="@currentRedactionType" @onchange="UpdateRedactedText">
                    @if (redactionTypes != null)
                    {
                        @foreach (var enumValue in redactionTypes)
                        {
                            <option value="@enumValue">@enumValue</option>
                        }
                    }
                </select>
            </div>
        </div>

        <div class="field">
            <label class="label">Result:</label>
            <div class="control">
                <textarea class="textarea is-static has-fixed-size" rows="3" readonly @bind="redactedText" />
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string FunctionName { get; set; }

    [Parameter]
    public string InputText { get; set; }

    private string redactedText;

    private string currentRedactionType { get; set; }

    private Redactor redactor { get; set; }

    private MethodInfo redactorMethod;

    private List<string> redactionTypes = new List<string>();

    private Type enumType;

    private Type redactorOptionsType;

    private PropertyInfo enumProperty;
    //private object redactorOptionsInstance;


    protected override void OnInitialized()
    {
        Console.WriteLine($"Initializing {FunctionName} component");

        redactor = new Redactor();

        var methods = redactor.GetType().GetMethods()
        .Where(m => m.Name == FunctionName &&
               m.ReturnType == typeof(string) &&
               m.GetParameters()[0].ParameterType == typeof(string) &&
               m.GetParameters().Length == 2).ToList();

        redactorMethod = methods[0];
        redactorOptionsType = redactorMethod.GetParameters()[1].ParameterType;

        enumProperty = redactorOptionsType.GetProperties()
            .FirstOrDefault(p => p.PropertyType.IsEnum);

        if (enumProperty != null)
        {
            enumType = enumProperty.PropertyType;

            redactionTypes = Enum.GetNames(enumType).ToList();

            var fullEnumValue = Enum.GetNames(enumType).FirstOrDefault(name => name.Equals("full", StringComparison.OrdinalIgnoreCase));
            currentRedactionType = fullEnumValue ?? redactionTypes.First();
        }

        UpdateRedactedText(new ChangeEventArgs
            {
                Value = currentRedactionType
            });
    }

    protected override void OnParametersSet()
    {
        UpdateRedactedText(new ChangeEventArgs
            {
                Value = currentRedactionType
            });
    }


    private void UpdateRedactedText(ChangeEventArgs e)
    {
        currentRedactionType = e.Value.ToString();

        // Get the selected enum value
        var enumValue = Enum.Parse(enumType, currentRedactionType);

        //Console.WriteLine(enumValue);

        // Create an instance of EmailAddressRedactorOptions
        var redactorOptionsInstance = Activator.CreateInstance(redactorOptionsType);

        // Set the enum property to the selected value of the enum
        enumProperty.SetValue(redactorOptionsInstance, enumValue);

        //Console.WriteLine($"{FunctionName}: {InputText}");

        redactedText = redactorMethod.Invoke(redactor, new object[] { InputText, redactorOptionsInstance }).ToString();

        StateHasChanged();
    }

    public void ShuffleSelect()
    {
        if (redactionTypes != null && redactionTypes.Count > 1)
        {
            string randomRedactionType;
            do
            {
                var weightedList = redactionTypes.SelectMany(type =>
                {
                    if (type.Equals("all", StringComparison.OrdinalIgnoreCase))
                    {
                        return Enumerable.Repeat(type, 1);
                    }
                    else if (type.Equals("fixedlength", StringComparison.OrdinalIgnoreCase))
                    {
                        return Enumerable.Repeat(type, 1);
                    }
                    return Enumerable.Repeat(type, 3);
                }).ToList();

                var randomIndex = Random.Shared.Next(weightedList.Count);
                randomRedactionType = weightedList[randomIndex];
            } while (randomRedactionType == currentRedactionType);

            currentRedactionType = randomRedactionType;

            UpdateRedactedText(new ChangeEventArgs
                {
                    Value = randomRedactionType
                });

            StateHasChanged();
        }
    }
}
