{
  "api/ZeroRedact.CreditCardRedaction.html": {
    "href": "api/ZeroRedact.CreditCardRedaction.html",
    "title": "Enum CreditCardRedaction | ZeroRedact",
    "keywords": "Enum CreditCardRedaction Namespace ZeroRedact Assembly ZeroRedact.dll Defines the different types of redactions that can be applied to a credit card number. public enum CreditCardRedaction Fields All = 0 The credit card number is redacted. FixedLength = 1 The credit card number is redacted with a fixed length. Full = 2 The credit card number is redacted, preserving symbols. ShowFirstSixLastFour = 4 The first six digits and the last four digits of the credit card number are shown. ShowLastFour = 3 The last four digits of the credit card number are shown."
  },
  "api/ZeroRedact.CreditCardRedactorOptions.html": {
    "href": "api/ZeroRedact.CreditCardRedactorOptions.html",
    "title": "Struct CreditCardRedactorOptions | ZeroRedact",
    "keywords": "Struct CreditCardRedactorOptions Namespace ZeroRedact Assembly ZeroRedact.dll Credit card redactor options. public readonly struct CreditCardRedactorOptions Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors CreditCardRedactorOptions() Constructs a new CreditCardRedactorOptions instance. public CreditCardRedactorOptions() Properties FixedLengthSize The fixed length size of the redaction. public int FixedLengthSize { get; init; } Property Value int RedactionCharacter The character used for the redaction. public char RedactionCharacter { get; init; } Property Value char RedactorType The type of redactor to apply. public CreditCardRedaction RedactorType { get; init; } Property Value CreditCardRedaction"
  },
  "api/ZeroRedact.DateRedaction.html": {
    "href": "api/ZeroRedact.DateRedaction.html",
    "title": "Enum DateRedaction | ZeroRedact",
    "keywords": "Enum DateRedaction Namespace ZeroRedact Assembly ZeroRedact.dll Defines the different types of redactions that can be applied to a date. public enum DateRedaction Fields All = 0 The date is redacted. Day = 3 The day is redacted. DayAndMonth = 6 The day and month are redacted. DayAndYear = 8 The day and year are redacted. FixedLength = 1 The date is redacted with a fixed length. Full = 2 The date is redacted, showing the date separator. Month = 4 The month is redacted. MonthAndYear = 7 The month and year are redacted. Year = 5 The year is redacted."
  },
  "api/ZeroRedact.DateRedactorOptions.html": {
    "href": "api/ZeroRedact.DateRedactorOptions.html",
    "title": "Struct DateRedactorOptions | ZeroRedact",
    "keywords": "Struct DateRedactorOptions Namespace ZeroRedact Assembly ZeroRedact.dll Date redactor options. public readonly struct DateRedactorOptions Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors DateRedactorOptions() Constructs a new DateRedactorOptions instance. public DateRedactorOptions() Properties FixedLengthSize The fixed length size of the redaction. public int FixedLengthSize { get; init; } Property Value int RedactionCharacter The character used for the redaction. public char RedactionCharacter { get; init; } Property Value char RedactorType The type of redactor to apply. public DateRedaction RedactorType { get; init; } Property Value DateRedaction"
  },
  "api/ZeroRedact.EmailAddressRedaction.html": {
    "href": "api/ZeroRedact.EmailAddressRedaction.html",
    "title": "Enum EmailAddressRedaction | ZeroRedact",
    "keywords": "Enum EmailAddressRedaction Namespace ZeroRedact Assembly ZeroRedact.dll Defines the different types of redactions that can be applied to an email address. public enum EmailAddressRedaction Fields All = 0 The email address is redacted. FirstHalfUsername = 4 The first half of the username is redacted. FixedLength = 1 The email address is redacted with a fixed width. Full = 2 Only the @ symbol and final dot is shown. Middle = 5 The second half of the username and the first half of the domain are redacted. MostUsername = 6 Only the first and last characters of the username are shown along with showing the full domain. ShowFirstCharacters = 7 Only the first character of the username and host are shown along with showing the full domain. Username = 3 The local-part/username is redacted."
  },
  "api/ZeroRedact.EmailAddressRedactorOptions.html": {
    "href": "api/ZeroRedact.EmailAddressRedactorOptions.html",
    "title": "Struct EmailAddressRedactorOptions | ZeroRedact",
    "keywords": "Struct EmailAddressRedactorOptions Namespace ZeroRedact Assembly ZeroRedact.dll Email address redactor options. public readonly struct EmailAddressRedactorOptions Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors EmailAddressRedactorOptions() Constructs a new EmailAddressRedactorOptions instance. public EmailAddressRedactorOptions() Properties FixedLengthSize The fixed length size of the redaction. public int FixedLengthSize { get; init; } Property Value int RedactionCharacter The character used for the redaction. public char RedactionCharacter { get; init; } Property Value char RedactorType The type of redactor to apply. public EmailAddressRedaction RedactorType { get; init; } Property Value EmailAddressRedaction"
  },
  "api/ZeroRedact.IPv4Redaction.html": {
    "href": "api/ZeroRedact.IPv4Redaction.html",
    "title": "Enum IPv4Redaction | ZeroRedact",
    "keywords": "Enum IPv4Redaction Namespace ZeroRedact Assembly ZeroRedact.dll Defines the different types of redactions that can be applied to an IPv4 address. public enum IPv4Redaction Fields All = 0 The IPv4 address is redacted. FixedLength = 1 The IPv4 address is redacted with a fixed length. Full = 2 The IPv4 address is redacted, preserving symbols. ShowLastOctet = 3 The last octet of the IPv4 address are shown."
  },
  "api/ZeroRedact.IPv4RedactorOptions.html": {
    "href": "api/ZeroRedact.IPv4RedactorOptions.html",
    "title": "Struct IPv4RedactorOptions | ZeroRedact",
    "keywords": "Struct IPv4RedactorOptions Namespace ZeroRedact Assembly ZeroRedact.dll IPV4 redactor options. public readonly struct IPv4RedactorOptions Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors IPv4RedactorOptions() Constructs a new IPv4RedactorOptions instance. public IPv4RedactorOptions() Properties FixedLengthSize The fixed length size of the redaction. public int FixedLengthSize { get; init; } Property Value int RedactionCharacter The character used for the redaction. public char RedactionCharacter { get; init; } Property Value char RedactorType The type of redactor to apply. public IPv4Redaction RedactorType { get; init; } Property Value IPv4Redaction"
  },
  "api/ZeroRedact.IPv6Redaction.html": {
    "href": "api/ZeroRedact.IPv6Redaction.html",
    "title": "Enum IPv6Redaction | ZeroRedact",
    "keywords": "Enum IPv6Redaction Namespace ZeroRedact Assembly ZeroRedact.dll Defines the different types of redactions that can be applied to an IPv6 address. public enum IPv6Redaction Fields All = 0 The IPv6 address is redacted. FixedLength = 1 The IPv4 address is redacted with a fixed length. Full = 2 The IPv4 address is redacted, preserving symbols. ShowLastQuartet = 3 The last quartet of the IPv6 address are shown."
  },
  "api/ZeroRedact.IPv6RedactorOptions.html": {
    "href": "api/ZeroRedact.IPv6RedactorOptions.html",
    "title": "Struct IPv6RedactorOptions | ZeroRedact",
    "keywords": "Struct IPv6RedactorOptions Namespace ZeroRedact Assembly ZeroRedact.dll IPv6 redactor options. public readonly struct IPv6RedactorOptions Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors IPv6RedactorOptions() Constructs a new IPv6RedactorOptions instance. public IPv6RedactorOptions() Properties FixedLengthSize The fixed length size of the redaction. public int FixedLengthSize { get; init; } Property Value int RedactionCharacter The character used for the redaction. public char RedactionCharacter { get; init; } Property Value char RedactorType The type of redactor to apply. public IPv6Redaction RedactorType { get; init; } Property Value IPv6Redaction"
  },
  "api/ZeroRedact.IRedactor.html": {
    "href": "api/ZeroRedact.IRedactor.html",
    "title": "Interface IRedactor | ZeroRedact",
    "keywords": "Interface IRedactor Namespace ZeroRedact Assembly ZeroRedact.dll Implements redaction capabilities. public interface IRedactor Methods RedactCreditCard(ReadOnlySpan<char>) Redacts the provided credit card number. ReadOnlySpan<char> RedactCreditCard(ReadOnlySpan<char> creditCardNumber) Parameters creditCardNumber ReadOnlySpan<char> The credit card number to redact. Returns ReadOnlySpan<char> RedactCreditCard(ReadOnlySpan<char>, CreditCardRedactorOptions) Redacts the provided credit card number. ReadOnlySpan<char> RedactCreditCard(ReadOnlySpan<char> creditCardNumber, CreditCardRedactorOptions redactorOptions) Parameters creditCardNumber ReadOnlySpan<char> The credit card number to redact. redactorOptions CreditCardRedactorOptions The options to control redaction behavior. Returns ReadOnlySpan<char> RedactCreditCard(string) Redacts the provided credit card number. string RedactCreditCard(string creditCardNumber) Parameters creditCardNumber string The credit card number to redact. Returns string RedactCreditCard(string, CreditCardRedactorOptions) Redacts the provided credit card number. string RedactCreditCard(string creditCardNumber, CreditCardRedactorOptions redactorOptions) Parameters creditCardNumber string The credit card number to redact. redactorOptions CreditCardRedactorOptions The options to control redaction behavior. Returns string RedactDate(DateOnly) Redacts the provided date. string RedactDate(DateOnly date) Parameters date DateOnly The date to redact. Returns string Returns redacted short date formatted for the current CultureInfo. RedactDate(DateOnly, DateRedactorOptions) Redacts the provided date. string RedactDate(DateOnly date, DateRedactorOptions redactorOptions) Parameters date DateOnly The date to redact. redactorOptions DateRedactorOptions The options to control redaction behavior. Returns string Returns redacted short date formatted for the current CultureInfo. RedactDate(DateTime) Redacts the provided date. string RedactDate(DateTime date) Parameters date DateTime The date to redact. Returns string Returns redacted short date formatted for the current CultureInfo. RedactDate(DateTime, DateRedactorOptions) Redacts the provided date. string RedactDate(DateTime date, DateRedactorOptions redactorOptions) Parameters date DateTime The date to redact. redactorOptions DateRedactorOptions The options to control redaction behavior. Returns string Returns redacted short date formatted for the current CultureInfo. RedactEmailAddress(MailAddress) Redacts the provided email address. string RedactEmailAddress(MailAddress emailAddress) Parameters emailAddress MailAddress The email address to redact. Returns string RedactEmailAddress(MailAddress, EmailAddressRedactorOptions) Redacts the provided email address. string RedactEmailAddress(MailAddress emailAddress, EmailAddressRedactorOptions redactorOptions) Parameters emailAddress MailAddress The email address to redact. redactorOptions EmailAddressRedactorOptions The options to control redaction behavior. Returns string RedactEmailAddress(ReadOnlySpan<char>) Redacts the provided email address. ReadOnlySpan<char> RedactEmailAddress(ReadOnlySpan<char> emailAddress) Parameters emailAddress ReadOnlySpan<char> The email address to redact. Returns ReadOnlySpan<char> RedactEmailAddress(ReadOnlySpan<char>, EmailAddressRedactorOptions) Redacts the provided email address. ReadOnlySpan<char> RedactEmailAddress(ReadOnlySpan<char> emailAddress, EmailAddressRedactorOptions redactorOptions) Parameters emailAddress ReadOnlySpan<char> The email address to redact. redactorOptions EmailAddressRedactorOptions The options to control redaction behavior. Returns ReadOnlySpan<char> RedactEmailAddress(string) Redacts the provided email address. string RedactEmailAddress(string emailAddress) Parameters emailAddress string The email address to redact. Returns string RedactEmailAddress(string, EmailAddressRedactorOptions) Redacts the provided email address. string RedactEmailAddress(string emailAddress, EmailAddressRedactorOptions redactorOptions) Parameters emailAddress string The email address to redact. redactorOptions EmailAddressRedactorOptions The options to control redaction behavior. Returns string RedactIPv4Address(ReadOnlySpan<char>) Redacts the provided IPv4 address. ReadOnlySpan<char> RedactIPv4Address(ReadOnlySpan<char> ipAddress) Parameters ipAddress ReadOnlySpan<char> The IPv4 address to redact. Returns ReadOnlySpan<char> RedactIPv4Address(ReadOnlySpan<char>, IPv4RedactorOptions) Redacts the provided IPv4 address. ReadOnlySpan<char> RedactIPv4Address(ReadOnlySpan<char> ipAddress, IPv4RedactorOptions redactorOptions) Parameters ipAddress ReadOnlySpan<char> The IPv4 address to redact. redactorOptions IPv4RedactorOptions The options to control redaction behavior. Returns ReadOnlySpan<char> RedactIPv4Address(string) Redacts the provided IPv4 address. string RedactIPv4Address(string ipAddress) Parameters ipAddress string The IPv4 address to redact. Returns string RedactIPv4Address(string, IPv4RedactorOptions) Redacts the provided IPv4 address. string RedactIPv4Address(string ipAddress, IPv4RedactorOptions redactorOptions) Parameters ipAddress string The IPv4 address to redact. redactorOptions IPv4RedactorOptions The options to control redaction behavior. Returns string RedactIPv6Address(ReadOnlySpan<char>) Redacts the provided IPv6 address. ReadOnlySpan<char> RedactIPv6Address(ReadOnlySpan<char> ipAddress) Parameters ipAddress ReadOnlySpan<char> The IPv6 address to redact Returns ReadOnlySpan<char> RedactIPv6Address(ReadOnlySpan<char>, IPv6RedactorOptions) Redacts the provided IPv6 address. ReadOnlySpan<char> RedactIPv6Address(ReadOnlySpan<char> ipAddress, IPv6RedactorOptions redactorOptions) Parameters ipAddress ReadOnlySpan<char> The IPv6 address to redact. redactorOptions IPv6RedactorOptions The options to control redaction behavior. Returns ReadOnlySpan<char> RedactIPv6Address(string) Redacts the provided IPv6 address. string RedactIPv6Address(string ipAddress) Parameters ipAddress string The IPv6 address to redact Returns string RedactIPv6Address(string, IPv6RedactorOptions) Redacts the provided IPv6 address. string RedactIPv6Address(string ipAddress, IPv6RedactorOptions redactorOptions) Parameters ipAddress string The IPv6 address to redact. redactorOptions IPv6RedactorOptions The options to control redaction behavior. Returns string RedactMACAddress(ReadOnlySpan<char>) Redacts the provided MAC address. ReadOnlySpan<char> RedactMACAddress(ReadOnlySpan<char> macAddress) Parameters macAddress ReadOnlySpan<char> The MAC address to redact. Returns ReadOnlySpan<char> RedactMACAddress(ReadOnlySpan<char>, MACAddressRedactorOptions) Redacts the provided MAC address. ReadOnlySpan<char> RedactMACAddress(ReadOnlySpan<char> macAddress, MACAddressRedactorOptions redactorOptions) Parameters macAddress ReadOnlySpan<char> The MAC address to redact. redactorOptions MACAddressRedactorOptions The options to control redaction behavior. Returns ReadOnlySpan<char> RedactMACAddress(string) Redacts the provided MAC address. string RedactMACAddress(string macAddress) Parameters macAddress string The MAC address to redact. Returns string RedactMACAddress(string, MACAddressRedactorOptions) Redacts the provided MAC address. string RedactMACAddress(string macAddress, MACAddressRedactorOptions redactorOptions) Parameters macAddress string The MAC address to redact. redactorOptions MACAddressRedactorOptions The options to control redaction behavior. Returns string RedactPhoneNumber(ReadOnlySpan<char>) Redacts the provided phone number. ReadOnlySpan<char> RedactPhoneNumber(ReadOnlySpan<char> phoneNumber) Parameters phoneNumber ReadOnlySpan<char> The phone number to redact. Returns ReadOnlySpan<char> RedactPhoneNumber(ReadOnlySpan<char>, PhoneNumberRedactorOptions) Redacts the provided phone number. ReadOnlySpan<char> RedactPhoneNumber(ReadOnlySpan<char> phoneNumber, PhoneNumberRedactorOptions redactorOptions) Parameters phoneNumber ReadOnlySpan<char> The phone number to redact. redactorOptions PhoneNumberRedactorOptions The options to control redaction behavior. Returns ReadOnlySpan<char> RedactPhoneNumber(string) Redacts the provided phone number. string RedactPhoneNumber(string phoneNumber) Parameters phoneNumber string The phone number to redact. Returns string RedactPhoneNumber(string, PhoneNumberRedactorOptions) Redacts the provided phone number. string RedactPhoneNumber(string phoneNumber, PhoneNumberRedactorOptions redactorOptions) Parameters phoneNumber string The phone number to redact. redactorOptions PhoneNumberRedactorOptions The options to control redaction behavior. Returns string RedactString(ReadOnlySpan<char>) Redacts the provided string. ReadOnlySpan<char> RedactString(ReadOnlySpan<char> value) Parameters value ReadOnlySpan<char> The string to redact. Returns ReadOnlySpan<char> RedactString(ReadOnlySpan<char>, StringRedactorOptions) Redacts the provided string. ReadOnlySpan<char> RedactString(ReadOnlySpan<char> value, StringRedactorOptions redactorOptions) Parameters value ReadOnlySpan<char> The string to redact. redactorOptions StringRedactorOptions The redactorOptions to control redaction behavior. Returns ReadOnlySpan<char> RedactString(string) Redacts the provided string. string RedactString(string value) Parameters value string The string to redact. Returns string RedactString(string, StringRedactorOptions) Redacts the provided string. string RedactString(string value, StringRedactorOptions redactorOptions) Parameters value string The string to redact. redactorOptions StringRedactorOptions The redactorOptions to control redaction behavior. Returns string"
  },
  "api/ZeroRedact.MACAddressRedaction.html": {
    "href": "api/ZeroRedact.MACAddressRedaction.html",
    "title": "Enum MACAddressRedaction | ZeroRedact",
    "keywords": "Enum MACAddressRedaction Namespace ZeroRedact Assembly ZeroRedact.dll Defines the different types of redactions that can be applied to a MAC address. public enum MACAddressRedaction Fields All = 0 The MAC address is redacted. FixedLength = 1 The MAC address is redacted with a fixed length. Full = 2 The MAC address is redacted, preserving symbols. ShowLastByte = 3 The last byte of the MAC address is shown."
  },
  "api/ZeroRedact.MACAddressRedactorOptions.html": {
    "href": "api/ZeroRedact.MACAddressRedactorOptions.html",
    "title": "Struct MACAddressRedactorOptions | ZeroRedact",
    "keywords": "Struct MACAddressRedactorOptions Namespace ZeroRedact Assembly ZeroRedact.dll MAC address redactor options. public readonly struct MACAddressRedactorOptions Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors MACAddressRedactorOptions() Constructs a new MACAddressRedactorOptions instance. public MACAddressRedactorOptions() Properties FixedLengthSize The fixed length size of the redaction. public int FixedLengthSize { get; init; } Property Value int RedactionCharacter The character used for the redaction. public char RedactionCharacter { get; init; } Property Value char RedactorType The type of redactor to apply. public MACAddressRedaction RedactorType { get; init; } Property Value MACAddressRedaction"
  },
  "api/ZeroRedact.PhoneNumberRedaction.html": {
    "href": "api/ZeroRedact.PhoneNumberRedaction.html",
    "title": "Enum PhoneNumberRedaction | ZeroRedact",
    "keywords": "Enum PhoneNumberRedaction Namespace ZeroRedact Assembly ZeroRedact.dll Defines the different types of redactions that can be applied to a phone number. public enum PhoneNumberRedaction Fields All = 0 The phone number is redacted. FixedLength = 1 The phone number is redacted with a fixed length. Full = 2 The phone number is redacted, preserving symbols. ShowLastFour = 3 The last four digits of the credit card number are shown."
  },
  "api/ZeroRedact.PhoneNumberRedactorOptions.html": {
    "href": "api/ZeroRedact.PhoneNumberRedactorOptions.html",
    "title": "Struct PhoneNumberRedactorOptions | ZeroRedact",
    "keywords": "Struct PhoneNumberRedactorOptions Namespace ZeroRedact Assembly ZeroRedact.dll Phone number redactor options. public readonly struct PhoneNumberRedactorOptions Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors PhoneNumberRedactorOptions() Constructs a new PhoneNumberRedactorOptions instance. public PhoneNumberRedactorOptions() Properties FixedLengthSize The fixed length size of the redaction. public int FixedLengthSize { get; init; } Property Value int RedactionCharacter The character used for the redaction. public char RedactionCharacter { get; init; } Property Value char RedactorType The type of redactor to apply. public PhoneNumberRedaction RedactorType { get; init; } Property Value PhoneNumberRedaction"
  },
  "api/ZeroRedact.Redactor.html": {
    "href": "api/ZeroRedact.Redactor.html",
    "title": "Class Redactor | ZeroRedact",
    "keywords": "Class Redactor Namespace ZeroRedact Assembly ZeroRedact.dll Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. public sealed class Redactor : IRedactor Inheritance object Redactor Implements IRedactor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors Redactor() Initializes a new instance of the Redactor class. public Redactor() Redactor(RedactorOptions) Initializes a new instance of the Redactor class with the specified options. public Redactor(RedactorOptions options) Parameters options RedactorOptions The options to configure the redactor. Exceptions ArgumentOutOfRangeException Thrown when options has a lass than 0 FixedLengthSize. Methods RedactCreditCard(ReadOnlySpan<char>) Redacts the provided credit card number. public ReadOnlySpan<char> RedactCreditCard(ReadOnlySpan<char> creditCardNumber) Parameters creditCardNumber ReadOnlySpan<char> The credit card number to redact. Returns ReadOnlySpan<char> RedactCreditCard(ReadOnlySpan<char>, CreditCardRedactorOptions) Redacts the provided credit card number. public ReadOnlySpan<char> RedactCreditCard(ReadOnlySpan<char> creditCardNumber, CreditCardRedactorOptions redactorOptions) Parameters creditCardNumber ReadOnlySpan<char> The credit card number to redact. redactorOptions CreditCardRedactorOptions The options to control redaction behavior. Returns ReadOnlySpan<char> RedactCreditCard(string) Redacts the provided credit card number. public string RedactCreditCard(string creditCardNumber) Parameters creditCardNumber string The credit card number to redact. Returns string RedactCreditCard(string, CreditCardRedactorOptions) Redacts the provided credit card number. public string RedactCreditCard(string creditCardNumber, CreditCardRedactorOptions redactorOptions) Parameters creditCardNumber string The credit card number to redact. redactorOptions CreditCardRedactorOptions The options to control redaction behavior. Returns string RedactDate(DateOnly) Redacts the provided date. public string RedactDate(DateOnly date) Parameters date DateOnly The date to redact. Returns string Returns redacted short date formatted for the current CultureInfo. RedactDate(DateOnly, DateRedactorOptions) Redacts the provided date. public string RedactDate(DateOnly date, DateRedactorOptions redactorOptions) Parameters date DateOnly The date to redact. redactorOptions DateRedactorOptions The options to control redaction behavior. Returns string Returns redacted short date formatted for the current CultureInfo. RedactDate(DateTime) Redacts the provided date. public string RedactDate(DateTime date) Parameters date DateTime The date to redact. Returns string Returns redacted short date formatted for the current CultureInfo. RedactDate(DateTime, DateRedactorOptions) Redacts the provided date. public string RedactDate(DateTime date, DateRedactorOptions redactorOptions) Parameters date DateTime The date to redact. redactorOptions DateRedactorOptions The options to control redaction behavior. Returns string Returns redacted short date formatted for the current CultureInfo. RedactEmailAddress(MailAddress) Redacts the provided email address. public string RedactEmailAddress(MailAddress emailAddress) Parameters emailAddress MailAddress The email address to redact. Returns string RedactEmailAddress(MailAddress, EmailAddressRedactorOptions) Redacts the provided email address. public string RedactEmailAddress(MailAddress emailAddress, EmailAddressRedactorOptions redactorOptions) Parameters emailAddress MailAddress The email address to redact. redactorOptions EmailAddressRedactorOptions The options to control redaction behavior. Returns string RedactEmailAddress(ReadOnlySpan<char>) Redacts the provided email address. public ReadOnlySpan<char> RedactEmailAddress(ReadOnlySpan<char> emailAddress) Parameters emailAddress ReadOnlySpan<char> The email address to redact. Returns ReadOnlySpan<char> RedactEmailAddress(ReadOnlySpan<char>, EmailAddressRedactorOptions) Redacts the provided email address. public ReadOnlySpan<char> RedactEmailAddress(ReadOnlySpan<char> emailAddress, EmailAddressRedactorOptions redactorOptions) Parameters emailAddress ReadOnlySpan<char> The email address to redact. redactorOptions EmailAddressRedactorOptions The options to control redaction behavior. Returns ReadOnlySpan<char> RedactEmailAddress(string) Redacts the provided email address. public string RedactEmailAddress(string emailAddress) Parameters emailAddress string The email address to redact. Returns string RedactEmailAddress(string, EmailAddressRedactorOptions) Redacts the provided email address. public string RedactEmailAddress(string emailAddress, EmailAddressRedactorOptions redactorOptions) Parameters emailAddress string The email address to redact. redactorOptions EmailAddressRedactorOptions The options to control redaction behavior. Returns string RedactIPv4Address(ReadOnlySpan<char>) Redacts the provided IPv4 address. public ReadOnlySpan<char> RedactIPv4Address(ReadOnlySpan<char> ipAddress) Parameters ipAddress ReadOnlySpan<char> The IPv4 address to redact. Returns ReadOnlySpan<char> RedactIPv4Address(ReadOnlySpan<char>, IPv4RedactorOptions) Redacts the provided IPv4 address. public ReadOnlySpan<char> RedactIPv4Address(ReadOnlySpan<char> ipAddress, IPv4RedactorOptions redactorOptions) Parameters ipAddress ReadOnlySpan<char> The IPv4 address to redact. redactorOptions IPv4RedactorOptions The options to control redaction behavior. Returns ReadOnlySpan<char> RedactIPv4Address(string) Redacts the provided IPv4 address. public string RedactIPv4Address(string ipAddress) Parameters ipAddress string The IPv4 address to redact. Returns string RedactIPv4Address(string, IPv4RedactorOptions) Redacts the provided IPv4 address. public string RedactIPv4Address(string ipAddress, IPv4RedactorOptions redactorOptions) Parameters ipAddress string The IPv4 address to redact. redactorOptions IPv4RedactorOptions The options to control redaction behavior. Returns string RedactIPv6Address(ReadOnlySpan<char>) Redacts the provided IPv6 address. public ReadOnlySpan<char> RedactIPv6Address(ReadOnlySpan<char> ipAddress) Parameters ipAddress ReadOnlySpan<char> The IPv6 address to redact Returns ReadOnlySpan<char> RedactIPv6Address(ReadOnlySpan<char>, IPv6RedactorOptions) Redacts the provided IPv6 address. public ReadOnlySpan<char> RedactIPv6Address(ReadOnlySpan<char> ipAddress, IPv6RedactorOptions redactorOptions) Parameters ipAddress ReadOnlySpan<char> The IPv6 address to redact. redactorOptions IPv6RedactorOptions The options to control redaction behavior. Returns ReadOnlySpan<char> RedactIPv6Address(string) Redacts the provided IPv6 address. public string RedactIPv6Address(string ipAddress) Parameters ipAddress string The IPv6 address to redact Returns string RedactIPv6Address(string, IPv6RedactorOptions) Redacts the provided IPv6 address. public string RedactIPv6Address(string ipAddress, IPv6RedactorOptions redactorOptions) Parameters ipAddress string The IPv6 address to redact. redactorOptions IPv6RedactorOptions The options to control redaction behavior. Returns string RedactMACAddress(ReadOnlySpan<char>) Redacts the provided MAC address. public ReadOnlySpan<char> RedactMACAddress(ReadOnlySpan<char> macAddress) Parameters macAddress ReadOnlySpan<char> The MAC address to redact. Returns ReadOnlySpan<char> RedactMACAddress(ReadOnlySpan<char>, MACAddressRedactorOptions) Redacts the provided MAC address. public ReadOnlySpan<char> RedactMACAddress(ReadOnlySpan<char> macAddress, MACAddressRedactorOptions redactorOptions) Parameters macAddress ReadOnlySpan<char> The MAC address to redact. redactorOptions MACAddressRedactorOptions The options to control redaction behavior. Returns ReadOnlySpan<char> RedactMACAddress(string) Redacts the provided MAC address. public string RedactMACAddress(string macAddress) Parameters macAddress string The MAC address to redact. Returns string RedactMACAddress(string, MACAddressRedactorOptions) Redacts the provided MAC address. public string RedactMACAddress(string macAddress, MACAddressRedactorOptions redactorOptions) Parameters macAddress string The MAC address to redact. redactorOptions MACAddressRedactorOptions The options to control redaction behavior. Returns string RedactPhoneNumber(ReadOnlySpan<char>) Redacts the provided phone number. public ReadOnlySpan<char> RedactPhoneNumber(ReadOnlySpan<char> phoneNumber) Parameters phoneNumber ReadOnlySpan<char> The phone number to redact. Returns ReadOnlySpan<char> RedactPhoneNumber(ReadOnlySpan<char>, PhoneNumberRedactorOptions) Redacts the provided phone number. public ReadOnlySpan<char> RedactPhoneNumber(ReadOnlySpan<char> phoneNumber, PhoneNumberRedactorOptions redactorOptions) Parameters phoneNumber ReadOnlySpan<char> The phone number to redact. redactorOptions PhoneNumberRedactorOptions The options to control redaction behavior. Returns ReadOnlySpan<char> RedactPhoneNumber(string) Redacts the provided phone number. public string RedactPhoneNumber(string phoneNumber) Parameters phoneNumber string The phone number to redact. Returns string RedactPhoneNumber(string, PhoneNumberRedactorOptions) Redacts the provided phone number. public string RedactPhoneNumber(string phoneNumber, PhoneNumberRedactorOptions redactorOptions) Parameters phoneNumber string The phone number to redact. redactorOptions PhoneNumberRedactorOptions The options to control redaction behavior. Returns string RedactString(ReadOnlySpan<char>) Redacts the provided string. public ReadOnlySpan<char> RedactString(ReadOnlySpan<char> value) Parameters value ReadOnlySpan<char> The string to redact. Returns ReadOnlySpan<char> RedactString(ReadOnlySpan<char>, StringRedactorOptions) Redacts the provided string. public ReadOnlySpan<char> RedactString(ReadOnlySpan<char> value, StringRedactorOptions redactorOptions) Parameters value ReadOnlySpan<char> The string to redact. redactorOptions StringRedactorOptions The redactorOptions to control redaction behavior. Returns ReadOnlySpan<char> RedactString(string) Redacts the provided string. public string RedactString(string value) Parameters value string The string to redact. Returns string RedactString(string, StringRedactorOptions) Redacts the provided string. public string RedactString(string value, StringRedactorOptions redactorOptions) Parameters value string The string to redact. redactorOptions StringRedactorOptions The redactorOptions to control redaction behavior. Returns string"
  },
  "api/ZeroRedact.RedactorOptions.html": {
    "href": "api/ZeroRedact.RedactorOptions.html",
    "title": "Struct RedactorOptions | ZeroRedact",
    "keywords": "Struct RedactorOptions Namespace ZeroRedact Assembly ZeroRedact.dll Provides options to be used with Redactor public readonly struct RedactorOptions Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors RedactorOptions() Constructs a new RedactorOptions instance. public RedactorOptions() Properties CreditCardRedactorOptions The options for redacting credit card numbers. public CreditCardRedactorOptions CreditCardRedactorOptions { get; init; } Property Value CreditCardRedactorOptions DateRedactorOptions The options for redacting dates. public DateRedactorOptions DateRedactorOptions { get; init; } Property Value DateRedactorOptions EmailAddressRedactorOptions The options for redacting email addresses. public EmailAddressRedactorOptions EmailAddressRedactorOptions { get; init; } Property Value EmailAddressRedactorOptions FixedLengthSize The fixed length size of the redaction. public int FixedLengthSize { get; init; } Property Value int IPv4RedactorOptions The options for redacting IPv4 addresses. public IPv4RedactorOptions IPv4RedactorOptions { get; init; } Property Value IPv4RedactorOptions IPv6RedactorOptions The options for redacting IPv6 addresses. public IPv6RedactorOptions IPv6RedactorOptions { get; init; } Property Value IPv6RedactorOptions MACAddressRedactorOptions The MAC address redactor options. public MACAddressRedactorOptions MACAddressRedactorOptions { get; init; } Property Value MACAddressRedactorOptions PhoneNumberRedactorOptions The options for redacting phone numbers. public PhoneNumberRedactorOptions PhoneNumberRedactorOptions { get; init; } Property Value PhoneNumberRedactorOptions RedactionCharacter The character used for the redaction. public char RedactionCharacter { get; init; } Property Value char StringRedactorOptions The options for redacting strings. public StringRedactorOptions StringRedactorOptions { get; init; } Property Value StringRedactorOptions"
  },
  "api/ZeroRedact.Redactors.IRedactor.html": {
    "href": "api/ZeroRedact.Redactors.IRedactor.html",
    "title": "Interface IRedactor | ZeroRedact",
    "keywords": "Interface IRedactor Namespace ZeroRedact.Redactors Assembly ZeroRedact.dll Implements redaction capabilities. public interface IRedactor Methods RedactCreditCard(ReadOnlySpan<char>) Redacts the provided credit card number. ReadOnlySpan<char> RedactCreditCard(ReadOnlySpan<char> creditCardNumber) Parameters creditCardNumber ReadOnlySpan<char> The credit card number to redact. Returns ReadOnlySpan<char> RedactCreditCard(ReadOnlySpan<char>, CreditCardRedactorOptions) Redacts the provided credit card number. ReadOnlySpan<char> RedactCreditCard(ReadOnlySpan<char> creditCardNumber, CreditCardRedactorOptions redactorOptions) Parameters creditCardNumber ReadOnlySpan<char> The credit card number to redact. redactorOptions CreditCardRedactorOptions The options to control redaction behavior. Returns ReadOnlySpan<char> RedactCreditCard(string) Redacts the provided credit card number. string RedactCreditCard(string creditCardNumber) Parameters creditCardNumber string The credit card number to redact. Returns string RedactCreditCard(string, CreditCardRedactorOptions) Redacts the provided credit card number. string RedactCreditCard(string creditCardNumber, CreditCardRedactorOptions redactorOptions) Parameters creditCardNumber string The credit card number to redact. redactorOptions CreditCardRedactorOptions The options to control redaction behavior. Returns string RedactDate(DateOnly) Redacts the provided date. string RedactDate(DateOnly date) Parameters date DateOnly The date to redact. Returns string Returns redacted short date formatted for the current CultureInfo. RedactDate(DateOnly, DateRedactorOptions) Redacts the provided date. string RedactDate(DateOnly date, DateRedactorOptions redactorOptions) Parameters date DateOnly The date to redact. redactorOptions DateRedactorOptions The options to control redaction behavior. Returns string Returns redacted short date formatted for the current CultureInfo. RedactDate(DateTime) Redacts the provided date. string RedactDate(DateTime date) Parameters date DateTime The date to redact. Returns string Returns redacted short date formatted for the current CultureInfo. RedactDate(DateTime, DateRedactorOptions) Redacts the provided date. string RedactDate(DateTime date, DateRedactorOptions redactorOptions) Parameters date DateTime The date to redact. redactorOptions DateRedactorOptions The options to control redaction behavior. Returns string Returns redacted short date formatted for the current CultureInfo. RedactEmailAddress(MailAddress) Redacts the provided email address. string RedactEmailAddress(MailAddress emailAddress) Parameters emailAddress MailAddress The email address to redact. Returns string RedactEmailAddress(MailAddress, EmailAddressRedactorOptions) Redacts the provided email address. string RedactEmailAddress(MailAddress emailAddress, EmailAddressRedactorOptions redactorOptions) Parameters emailAddress MailAddress The email address to redact. redactorOptions EmailAddressRedactorOptions The options to control redaction behavior. Returns string RedactEmailAddress(ReadOnlySpan<char>) Redacts the provided email address. ReadOnlySpan<char> RedactEmailAddress(ReadOnlySpan<char> emailAddress) Parameters emailAddress ReadOnlySpan<char> The email address to redact. Returns ReadOnlySpan<char> RedactEmailAddress(ReadOnlySpan<char>, EmailAddressRedactorOptions) Redacts the provided email address. ReadOnlySpan<char> RedactEmailAddress(ReadOnlySpan<char> emailAddress, EmailAddressRedactorOptions redactorOptions) Parameters emailAddress ReadOnlySpan<char> The email address to redact. redactorOptions EmailAddressRedactorOptions The options to control redaction behavior. Returns ReadOnlySpan<char> RedactEmailAddress(string) Redacts the provided email address. string RedactEmailAddress(string emailAddress) Parameters emailAddress string The email address to redact. Returns string RedactEmailAddress(string, EmailAddressRedactorOptions) Redacts the provided email address. string RedactEmailAddress(string emailAddress, EmailAddressRedactorOptions redactorOptions) Parameters emailAddress string The email address to redact. redactorOptions EmailAddressRedactorOptions The options to control redaction behavior. Returns string RedactIPv4Address(ReadOnlySpan<char>) Redacts the provided IPv4 address. ReadOnlySpan<char> RedactIPv4Address(ReadOnlySpan<char> ipAddress) Parameters ipAddress ReadOnlySpan<char> The IPv4 address to redact. Returns ReadOnlySpan<char> RedactIPv4Address(ReadOnlySpan<char>, IPv4RedactorOptions) Redacts the provided IPv4 address. ReadOnlySpan<char> RedactIPv4Address(ReadOnlySpan<char> ipAddress, IPv4RedactorOptions redactorOptions) Parameters ipAddress ReadOnlySpan<char> The IPv4 address to redact. redactorOptions IPv4RedactorOptions The options to control redaction behavior. Returns ReadOnlySpan<char> RedactIPv4Address(string) Redacts the provided IPv4 address. string RedactIPv4Address(string ipAddress) Parameters ipAddress string The IPv4 address to redact. Returns string RedactIPv4Address(string, IPv4RedactorOptions) Redacts the provided IPv4 address. string RedactIPv4Address(string ipAddress, IPv4RedactorOptions redactorOptions) Parameters ipAddress string The IPv4 address to redact. redactorOptions IPv4RedactorOptions The options to control redaction behavior. Returns string RedactIPv6Address(ReadOnlySpan<char>) Redacts the provided IPv6 address. ReadOnlySpan<char> RedactIPv6Address(ReadOnlySpan<char> ipAddress) Parameters ipAddress ReadOnlySpan<char> The IPv6 address to redact Returns ReadOnlySpan<char> RedactIPv6Address(ReadOnlySpan<char>, IPv6RedactorOptions) Redacts the provided IPv6 address. ReadOnlySpan<char> RedactIPv6Address(ReadOnlySpan<char> ipAddress, IPv6RedactorOptions redactorOptions) Parameters ipAddress ReadOnlySpan<char> The IPv6 address to redact. redactorOptions IPv6RedactorOptions The options to control redaction behavior. Returns ReadOnlySpan<char> RedactIPv6Address(string) Redacts the provided IPv6 address. string RedactIPv6Address(string ipAddress) Parameters ipAddress string The IPv6 address to redact Returns string RedactIPv6Address(string, IPv6RedactorOptions) Redacts the provided IPv6 address. string RedactIPv6Address(string ipAddress, IPv6RedactorOptions redactorOptions) Parameters ipAddress string The IPv6 address to redact. redactorOptions IPv6RedactorOptions The options to control redaction behavior. Returns string RedactMACAddress(ReadOnlySpan<char>) Redacts the provided MAC address. ReadOnlySpan<char> RedactMACAddress(ReadOnlySpan<char> macAddress) Parameters macAddress ReadOnlySpan<char> The MAC address to redact. Returns ReadOnlySpan<char> RedactMACAddress(ReadOnlySpan<char>, MACAddressRedactorOptions) Redacts the provided MAC address. ReadOnlySpan<char> RedactMACAddress(ReadOnlySpan<char> macAddress, MACAddressRedactorOptions redactorOptions) Parameters macAddress ReadOnlySpan<char> The MAC address to redact. redactorOptions MACAddressRedactorOptions The options to control redaction behavior. Returns ReadOnlySpan<char> RedactMACAddress(string) Redacts the provided MAC address. string RedactMACAddress(string macAddress) Parameters macAddress string The MAC address to redact. Returns string RedactMACAddress(string, MACAddressRedactorOptions) Redacts the provided MAC address. string RedactMACAddress(string macAddress, MACAddressRedactorOptions redactorOptions) Parameters macAddress string The MAC address to redact. redactorOptions MACAddressRedactorOptions The options to control redaction behavior. Returns string RedactPhoneNumber(ReadOnlySpan<char>) Redacts the provided phone number. ReadOnlySpan<char> RedactPhoneNumber(ReadOnlySpan<char> phoneNumber) Parameters phoneNumber ReadOnlySpan<char> The phone number to redact. Returns ReadOnlySpan<char> RedactPhoneNumber(ReadOnlySpan<char>, PhoneNumberRedactorOptions) Redacts the provided phone number. ReadOnlySpan<char> RedactPhoneNumber(ReadOnlySpan<char> phoneNumber, PhoneNumberRedactorOptions redactorOptions) Parameters phoneNumber ReadOnlySpan<char> The phone number to redact. redactorOptions PhoneNumberRedactorOptions The options to control redaction behavior. Returns ReadOnlySpan<char> RedactPhoneNumber(string) Redacts the provided phone number. string RedactPhoneNumber(string phoneNumber) Parameters phoneNumber string The phone number to redact. Returns string RedactPhoneNumber(string, PhoneNumberRedactorOptions) Redacts the provided phone number. string RedactPhoneNumber(string phoneNumber, PhoneNumberRedactorOptions redactorOptions) Parameters phoneNumber string The phone number to redact. redactorOptions PhoneNumberRedactorOptions The options to control redaction behavior. Returns string RedactString(ReadOnlySpan<char>) Redacts the provided string. ReadOnlySpan<char> RedactString(ReadOnlySpan<char> value) Parameters value ReadOnlySpan<char> The string to redact. Returns ReadOnlySpan<char> RedactString(ReadOnlySpan<char>, StringRedactorOptions) Redacts the provided string. ReadOnlySpan<char> RedactString(ReadOnlySpan<char> value, StringRedactorOptions redactorOptions) Parameters value ReadOnlySpan<char> The string to redact. redactorOptions StringRedactorOptions The redactorOptions to control redaction behavior. Returns ReadOnlySpan<char> RedactString(string) Redacts the provided string. string RedactString(string value) Parameters value string The string to redact. Returns string RedactString(string, StringRedactorOptions) Redacts the provided string. string RedactString(string value, StringRedactorOptions redactorOptions) Parameters value string The string to redact. redactorOptions StringRedactorOptions The redactorOptions to control redaction behavior. Returns string"
  },
  "api/ZeroRedact.Redactors.html": {
    "href": "api/ZeroRedact.Redactors.html",
    "title": "Namespace ZeroRedact.Redactors | ZeroRedact",
    "keywords": "Namespace ZeroRedact.Redactors Interfaces IRedactor Implements redaction capabilities."
  },
  "api/ZeroRedact.StringRedaction.html": {
    "href": "api/ZeroRedact.StringRedaction.html",
    "title": "Enum StringRedaction | ZeroRedact",
    "keywords": "Enum StringRedaction Namespace ZeroRedact Assembly ZeroRedact.dll Defines the different types of redactions that can be applied to a string. public enum StringRedaction Fields All = 0 The string is redacted. FirstHalf = 2 The first half of the string is redacted. FixedLength = 1 The string is redacted with a fixed length. IgnoreSymbols = 4 All characters are redacted except symbols. SecondHalf = 3 The second half of the string is redacted."
  },
  "api/ZeroRedact.StringRedactorOptions.html": {
    "href": "api/ZeroRedact.StringRedactorOptions.html",
    "title": "Struct StringRedactorOptions | ZeroRedact",
    "keywords": "Struct StringRedactorOptions Namespace ZeroRedact Assembly ZeroRedact.dll String redactor options. public readonly struct StringRedactorOptions Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors StringRedactorOptions() Constructs a new StringRedactorOptions instance. public StringRedactorOptions() Properties FixedLengthSize The fixed length size of the redaction. public int FixedLengthSize { get; init; } Property Value int RedactionCharacter The character used for the redaction. public char RedactionCharacter { get; init; } Property Value char RedactorType The type of redactor to apply. public StringRedaction RedactorType { get; init; } Property Value StringRedaction"
  },
  "api/ZeroRedact.html": {
    "href": "api/ZeroRedact.html",
    "title": "Namespace ZeroRedact | ZeroRedact",
    "keywords": "Namespace ZeroRedact Classes Redactor Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. Structs CreditCardRedactorOptions Credit card redactor options. DateRedactorOptions Date redactor options. EmailAddressRedactorOptions Email address redactor options. IPv4RedactorOptions IPV4 redactor options. IPv6RedactorOptions IPv6 redactor options. MACAddressRedactorOptions MAC address redactor options. PhoneNumberRedactorOptions Phone number redactor options. RedactorOptions Provides options to be used with Redactor StringRedactorOptions String redactor options. Interfaces IRedactor Implements redaction capabilities. Enums CreditCardRedaction Defines the different types of redactions that can be applied to a credit card number. DateRedaction Defines the different types of redactions that can be applied to a date. EmailAddressRedaction Defines the different types of redactions that can be applied to an email address. IPv4Redaction Defines the different types of redactions that can be applied to an IPv4 address. IPv6Redaction Defines the different types of redactions that can be applied to an IPv6 address. MACAddressRedaction Defines the different types of redactions that can be applied to a MAC address. PhoneNumberRedaction Defines the different types of redactions that can be applied to a phone number. StringRedaction Defines the different types of redactions that can be applied to a string."
  },
  "demo/index.html": {
    "href": "demo/index.html",
    "title": "| ZeroRedact",
    "keywords": ""
  },
  "docfx/basic-concepts.html": {
    "href": "docfx/basic-concepts.html",
    "title": "Basic Concepts | ZeroRedact",
    "keywords": "Basic Concepts The following outlines good to know, basic concepts for ZeroRedact. What is redaction? Redaction is obscuring a piece of data. We often use it to protect private or confidential information such as Personally Identifiable Information (PII). This is what you see in documents with blacked out lines. Redaction is the goal of ZeroRedact. This similar, but different to masking, via AWS: Data masking creates fake versions of an organization's data by changing confidential information. Various techniques are used to create realistic and structurally similar changes. Once data is masked, you can’t reverse engineer or track back to the original data values without access to the original dataset. A simple example for masking would be taking an address, and replacing each part (street number, suburb, etc) with a different but valid piece of data. The address is still an address structure and valid looking, but now isn't the PII it was before. For more in depth, feel free to read: Data Masking vs. Data Redaction: Key Differences and Uses by Graham Thompson at Privacy Dynamics Configuration ZeroRedact uses a cascading configuration model. Options \"closer\" to the redaction time will overwrite prior options. For example, the redaction character can be set in three places: On RedactorOptions at Redactor construction time On a specific redaction type option, such as StringRedactorOptions which can be passed to the Redactor object at construction time In the redaction call, such as passing StringRedactorOptions to RedactString() The third will take precedence over all previous settings. This allows for good defaults and fine grained control when needed. Exceptions ZeroRedact will not throw exceptions during redaction. If an exception occurs, a default fixed length redaction is provided. This is from a safety first perspective where the highest level of redaction is used when the situation is unknown. This is preferrable over leaking data or interrupting code flow. See General Design for more."
  },
  "docfx/design/creditcard.html": {
    "href": "docfx/design/creditcard.html",
    "title": "Credit Card | ZeroRedact",
    "keywords": "Credit Card Redaction types The following redaction types were considered at for ZeroRedact. Redacted output Used Type Notes 0000-0000-0000-0000 - No redaction Not the goal for this project. While there could be an option for it, that would be more \"moving parts\" to maintain and test ******************* ✅ All characters full redaction Same length as the original credit card redaction. This includes the spaces or dashes between digit groups. While keeping the symbols would be better, this is kept in to preserve consistency of a \"full\" redaction across all redactors. ******** ✅ Fixed length full redaction Fixed size, probably doesn't give away the underlying data length, only that there is redacted data (unless the redaction length is the same as the data length) ****-****-****-**** ✅ Full digit partial redaction Redacts everything except symbols. If the input has no symbols, it would just be a full redaction at the length of the input digits ***************0000 - Showing last four, with symbols redacted too, partial redaction Superseded by below. ****-****-****-0000 ✅ Showing last four, not redacting symbols, partial redaction More useful than above because log investigations, or messages to users will have a little more context that this is a credit card 0000-00********0000 - Show first six, last four, with symbols redacted too, partial redaction Superseded by below 0000-00**-****-0000 ✅ Show first six, last four, not redacting symbols, partial redaction More useful than above because log investigations, or messages to users will have a little more context that this is a credit card The decision making to include a redaction type: It should cover all redacted It should cover the last four scenario It should cover the first six, last four scenario It should be clear it's a credit card number being redacted Notes Credit cards don't have to be 16 digits (Wikipedia) Redaction should work regardless of separator symbols, i.e. one big number Credit card testing info"
  },
  "docfx/design/date.html": {
    "href": "docfx/design/date.html",
    "title": "Date | ZeroRedact",
    "keywords": "Date Redaction types The following redaction types were considered at for ZeroRedact. These examples are using dd/mm/yyyy, though the redactor will respect the caller's CultureInfo.CurrentCulture. Redacted output Used Type Notes 15/06/2023 - No redaction Not the goal for this project. While there could be an option for it, that would be more \"moving parts\" to maintain and test ********** ✅ All characters full redaction Same length as the original date short string representation ******** ✅ Fixed length full redaction Fixed size, probably doesn't give away the underlying data length, only that there is redacted data (unless the redaction length is the same as the data length) **/**/**** ✅ Full number partial redaction Preserves the date delimiters. Obvious it's a date, and may give away 1st-9th of a month if a culture's format doesn't use 01-09 for day or month. **/**/2023 ✅ Redact day and month, but not year, partial redaction Date redactions in all forms probably fit a niche **/06/**** ✅ Redact day and year, but not month, partial redaction See above **/06/2023 ✅ Redact day, but not month and year, partial redaction See above 15/**/**** ✅ Redact month and year, but not day, partial redaction See above 15/**/2023 ✅ Redact month, but not day and year, partial redaction See above 15/06/**** ✅ Redact year, but not day and month, partial redaction See above The decision making to include a redaction type: Providing a full redaction suite for the different date combinations isn't too big, they can all go in It should be clear it's a date being redacted Notes The date redaction only accept the known .NET date objects DateTime and DateOnly. This is because the date validations, and culture formatting would be too much to manually write. Date redaction only returns the short date format to mimic DateOnly.ToString(). Date delimiter is preserved based on what .NET is using. There is no custom date formatting for a redacted date string."
  },
  "docfx/design/emailaddress.html": {
    "href": "docfx/design/emailaddress.html",
    "title": "Email Address | ZeroRedact",
    "keywords": "Email Address Redaction types The following redaction types were considered at for ZeroRedact. Redacted output Used Type Notes email@example.com - No redaction Not the goal for this project. While there could be an option for it, that would be more \"moving parts\" to maintain and test ***************** ✅ All characters full redaction Same length as the original string ******** ✅ Fixed length full redaction Fixed size, probably doesn't give away the underlying data length, only that there is redacted data (unless the redaction length is the same as the data length) *****@*******.*** ✅ Showing symbols, partial redaction Showing only the symbols that matter such as the final '@' and the final '.', as the email address spec allows multiple of those characters in an email *****@*******.com - Showing only the TLD, partial redaction Showing what is probably the least important bit of the email address (for most cases). Probably not too useful *****@example.*\\*\\* - Showing the domain without the TLD, partial redaction This doesn't seem useful in being able to partially identity data, because example below is probably better *****@example.com ✅ Showing the full domain, partial redaction Preserving the username length while showing the potentially lesser important domain email@*******.*** - Showing the username with the TLD dot, partial redaction This partial redaction might be counterintuitive to most purposes email@*******.com - Showing the username with the TLD, partial redaction Similar to above email@example.*** - Redacting only the TLD, partial redaction Probably useless for any important use case ***il@example.com ✅ Redacting only the first half (rounded up) of the username, partial redaction Probably useful in cases where a user is told \"an email has been sent to x\", reveals enough to be useful to the right people em*********le.com ✅ Redacting half of the useraname up to the @ and half after the @, partial redaction Similar use case to above e***l@example.com ✅ Redacting the username except the first and last characters, partial redaction Similar use case to above e****@*******.com - Redacting the username except the first character and all of the domain, partial redaction Similar use case to above e****@e\\*\\*\\*\\*\\*\\*.com ✅ Redacting the username except the first character and all of the domain, partial redaction Similar use case to above, but better than the one just above The decision making to include a redaction type: Does it work on redacting the most identifiable part, the username? What are common use cases for redacted email addresses? What are commonly expected redaction types for email addresses? it should be clear an email address is being redacted Notes IP domain email addresses are not supported but may function A good list of email addresses"
  },
  "docfx/design/general-design.html": {
    "href": "docfx/design/general-design.html",
    "title": "General Design | ZeroRedact",
    "keywords": "General Design The following outlines general design thoughts for ZeroRedact for, during, and after development. How is ZeroRedact used? This question is the big driver ZeroRedact design. This library is used to redact a discrete piece of sensitive information - that is, a given piece will only be the sensitive information such as an email address. This is in contrast with larger DLP libraries/services which scan entire documents and apply redacting where necessary. With this in mind, ZeroRedact offers both full and partial redaction for all types covered and they can be broken into three main types: Full redaction. The entire piece of sensitive information is replaced with a character and the length of the information is preserved. Full redaction at a fixed width. The entire piece of sensitive information is replaced by a fixed width string of a character. This further obscures the data by not giving away length hints. Partial redaction. Most redaction types in ZeroRedact are partial redactions. Redaction type Explanation Use cases Full redaction The entire piece of sensitive information is replaced with a character and the length of the information is preserved. To safely display or log Full redaction at a fixed width The entire piece of sensitive information is replaced by a fixed width string of a character. This further obscures the data by not giving away length hints. To safely display or log Partial redaction Most redaction types in ZeroRedact are partial redactions as these can have the most nuance with use cases For \"We will send an email to {email}\" messages For \"Payment will be made using this credit card {last four}\" messages Logging as much as a privacy policy allows for auditing or record keeping Displaying as much as a privacy policy allows ZeroRedact does not redact with strings such as \"[REDACTED]\". Only single. repeated characters such as '*'. No allocations The ultimate goal for this project is zero allocation; ZeroRedact. However, there will most likely be an allocation for the final string that gets produced - because it has to be created at some point. Performance Performance is a close second goal which often comes from no allocations. However, there may be cases that even after GC pressure is accounted for that something like source generated Regex might be faster. Except in the case for Regex, that allocates and cannot be used. Inspiration Design inspiration came from a lot of the .NET runtime repo, specifically System.Text.Json. Originally ZeroRedact was going to follow the JsonSerializer class of being a static partial class with static methods. However for the sake of testability and giving the user options, ZeroRedact ended up with a regular class approach. Maintability by having a partial class per type of redaction was also taken from the runtime repo. Option configuration Redaction options can be configured at: Redaction calling time Redaction object creation time And are layered, with a fallback to defaults if no options are ever specified. The idea of passing in options to a method is loosely based on JsonSerializerOptions and layering options based on `ConfigurationManager' (see this great post by Andrew Lock). Convenient overloads Depending on redacting type, there are multiple overloads that may include different types (e.g. DateTime and DateOnly for date redaction) and having redaction options setup just for that method call which may be different from default options. Defaults If there is a common enough consensus, that will be the default and it may not be the strongest redaction type. If there is no one strong redaction type, either a redaction that keeps the structure but the data hidden (such as **/**/***) or a full redaction will be the default. Data safety Redacting exceptions are supressed and the safest form of redaction is returned: a fixed width redaction. This was chosen because: The caller's execution is not interrupted. It's better to be safe and return the most anonymous and strongest form of redaction in ZeroRedact as a caller's current use case is unknown. The decision to return a fixed width redaction was weighed up against the security concerns above and other use cases such as: Having useful logs due to partial redaction Having useful user messages due to partial redaction Outside of exceptions, any failed data validation will also result in a fixed with redaction result. Invalid option exceptions However, any invalid options will throw an exception, whether they are passed to the Redactor constructor, or in via one of the redaction methods. It is only during the actual redaction work that errors are suppressed. Data validation ZeroRedact is not a data validation tool. Data is only validated enough to perform successful redactions. For example: \"email@example.com\" is valid and will be redacted with the requested redaction type \"email..@example.com\" is not a valid email due to \"..\" but will be redacted with the requested redaction type \"emailexample.com\" is not a valid email due to no \"@\" and will be redacted with a fixed width redaction as the \"@\" symbol is important for redacting \"Call me @ your earliest convenience. Thanks.\" is not a valid email, but will be redacted with the requested redaction type The reasons behind a lack of full validation are: Often complex to write for all edge cases Validation code may incur heap allocations Speed, as only what is necessary for ZeroRedact to perform redactions is checked It's expected the data is already validated Testing A lot of Data Driven Testing is used to ensure that sensitive information is correctly redacted. Benchmarking A lot of micro-benchmarking work is used to ensure ZeroRedact is a top performing library. No external dependencies Keeps project light, easier to maintain, easier to get approved by having Microsoft-only packages, less supply chain issues. Unicode Unicode is currently not supported. While single width unicode may work such as \"かわいい猫\" (Japanese for \"cute cat\") var redactor = new Redactor(); // correctly returns \"*****\" var result = redactor.RedactString(\"かわいい猫\"); However, when using multiple code points for a single character, such as the three code point character \"葛󠄀\" (\"Kuzdu\" or Chinese arrowroot), we get an unexpected result: var redactor = new Redactor(); // Incorrectly returns \"***\" var result = redactor.RedactString(\"葛󠄀\"); C# has the capability to deal with this with Rune however more effort needs to go into understanding whether this can happen without allocations. Read more about these complexities via: csharplang/Emoji character literals #4500 Verbosity The method names end up being verbose, for example: RedactEmailAddress(), EmailAddressRedactorOptions and how combined they can be large. This is intentional in order to be as clear as possible with expectations. As more full redaction libraries take in whole objects or documents to find the sensitive information within and redact, whereas ZeroRedact only redacts the given discrete piece of sensitive information. Confusion could arise if the email address redaction method was called redactor.RedactEmail() and while the input type is string/ReadOnlySpan, a user may put the content of their email and expect it to be redacted."
  },
  "docfx/design/ipv4address.html": {
    "href": "docfx/design/ipv4address.html",
    "title": "IPv4 Address | ZeroRedact",
    "keywords": "IPv4 Address Redacted output Used Type Notes 192.168.1.146 - No redaction Not the goal for this project. While there could be an option for it, that would be more \"moving parts\" to maintain and test ************* ✅ Full redaction Same length as the original string ******** ✅ Fixed length full redaction Fixed size, probably doesn't give away the underlying data length, only that there is redacted data (unless the redaction length is the same as the data length) ***.***.*.*** ✅ Full digit redaction, partial redaction Preserves separators, obvious it's an IPv4 address ***.***.*.146 ✅ Show last octet, partial redaction Useful due to log messages or user display without giving up too much The decision making to include a redaction type: It should be clear an IPv4 address is being redacted. Notes Subnets aren't supported"
  },
  "docfx/design/ipv6address.html": {
    "href": "docfx/design/ipv6address.html",
    "title": "IPv6 Address | ZeroRedact",
    "keywords": "IPv6 Address Redacted output Used Type Notes 2001:0000:130F:0000:0000:09C0:876A:130B - No redaction Not the goal for this project. While there could be an option for it, that would be more \"moving parts\" to maintain and test *************************************** ✅ Full redaction Same length as the original string ******** ✅ Fixed length full redaction Fixed size, probably doesn't give away the underlying data length, only that there is redacted data (unless the redaction length is the same as the data length) ****:****:****:****:****:****:****:**** ✅ Full digit redaction, partial redaction Preserves separators, obvious it's an IPv6 address ****:****:****:****:****:****:****:130B ✅ Show last quartet, partial redaction Useful due to log messages or user display without giving up too much The decision making to include a redaction type: It should be clear an IPv6 address is being redacted. Notes Subnets aren't supported"
  },
  "docfx/design/macaddress.html": {
    "href": "docfx/design/macaddress.html",
    "title": "MAC Address | ZeroRedact",
    "keywords": "MAC Address Redaction types Redacted output Used Type Notes 00:1A:2B:3C:4D:5E - No redaction Not the goal for this project. While there could be an option for it, that would be more \"moving parts\" to maintain and test ***************** ✅ All characters full redaction Same length as the original MAC address. This includes separators. ******** ✅ Fixed length full redaction Fixed size, probably doesn't give away the underlying data length, only that there is redacted data (unless the redaction length is the same as the data length) **:*:*:*:*:** ✅ Full character redaction partial redaction Preserves separators, obvious it's an IPv4 address **:*:*:*:*:5E ✅ Showing last byte partial redaction Useful due to log messages or user display without giving up too much The decision making to include a redaction type: It should be clear a MAC address is being redacted. Notes EUI-48 and EUI-64 formats are supported Space and dash separators are supported"
  },
  "docfx/design/phonenumber.html": {
    "href": "docfx/design/phonenumber.html",
    "title": "Phone Number | ZeroRedact",
    "keywords": "Phone Number Redaction types Redacted output Used Type Notes 212-456-7890 - No redaction Not the goal for this project. While there could be an option for it, that would be more \"moving parts\" to maintain and test ************ ✅ Full redaction Same length as the original string ******** ✅ Fixed length full redaction Fixed size, probably doesn't give away the underlying data length, only that there is redacted data (unless the redaction length is the same as the data length) ***-***-**** ✅ Full digit redaction, partial redaction This will ignore all non digit characters. I.e. \"+\" and \"()\" will be preserved. It should be obvious this is a phone number. ***-***-7890 ✅ Show four, partial redaction Useful due to log messages or user display (e.g. 2FA) without giving up too much The decision making to include a redaction type: It should be clear a phone number is being redacted. Notes E.164 phone number format preferred, but it should be fine without Example formats via Why You Should Care About Phone Number Formatting In Your CRM (and How to Fix Them) The validation checks for redacting will not care which characters are used as separators, or if there are characters to indicate area code Phone number research Microsoft - Globalization for telephone number formats Microsoft - Canonical address format for phone numbers Wikipedia - National conventions for writing telephone numbers"
  },
  "docfx/design/string.html": {
    "href": "docfx/design/string.html",
    "title": "String | ZeroRedact",
    "keywords": "String Redaction types The following redaction types were considered at for ZeroRedact. Redacted output Used Type Notes Hello, world! - No redaction Not the goal for this project. While there could be an option for it, that would be more \"moving parts\" to maintain and test ************* ✅ Full redaction Same length as the original string ******** ✅ Fixed length full redaction Fixed size, probably doesn't give away the underlying data length, only that there is redacted data (unless the redaction length is the same as the data length) *******world! ✅ First half partial redacted (rounded up) Possibly useful for another type of sensitive information not implemented Hello,******* ✅ Second half partial redacted (rounded up) Possibly useful for another type of sensitive information not implemented *****, *****! ✅ All redacted except symbols, partial redaction Possibly useful for another type of sensitive information not implemented The decision making to include a redaction type: This should be lightweight with few types. If more types are needed, it might be a sign there needs to be a new redaction type Notes With no structure to a raw string, there is no format to respect and work off of"
  },
  "docfx/redactorTypes/creditcard.html": {
    "href": "docfx/redactorTypes/creditcard.html",
    "title": "Credit Card | ZeroRedact",
    "keywords": "Credit Card The following show examples of all the credit card redactor types: var redactor = new Redactor(); var creditCard = \"4111-1111-1111-1111\"; // Uses default redactor (Full) // returns \"****-****-****-****\" var fullRedaction = redactor.RedactCreditCard(creditCard); // returns \"*******************\" var allOptions = new CreditCardRedactorOptions { RedactorType = CreditCardRedaction.All }; var allRedaction = redactor.RedactCreditCard(creditCard, allOptions); // returns \"********\" var fixedLengthOptions = new CreditCardRedactorOptions { RedactorType = CreditCardRedaction.FixedLength }; var fixedLengthRedaction = redactor.RedactCreditCard(creditCard, fixedLengthOptions); // returns \"****-****-****-1111\" var showLastFourOptions = new CreditCardRedactorOptions { RedactorType = CreditCardRedaction.ShowLastFour }; var showLastFourRedaction = redactor.RedactCreditCard(creditCard, showLastFourOptions); // returns \"4111-11**-****-1111\" var showFirstSixLastFourOptions = new CreditCardRedactorOptions { RedactorType = CreditCardRedaction.ShowFirstSixLastFour }; var showFirstSixLastFourRedaction = redactor.RedactCreditCard(creditCard, showFirstSixLastFourOptions);"
  },
  "docfx/redactorTypes/date.html": {
    "href": "docfx/redactorTypes/date.html",
    "title": "Date | ZeroRedact",
    "keywords": "Date The following show examples of all the date redactor types: var redactor = new Redactor(); var date = new DateTime(2023, 06, 15); // Uses default redactor (Full) // returns // en-NZ: \"**/**/****\" // en-US: \"*/**/****\" // ja-JP: \"****/**/**\" // InvariantCulture: \"**/**/****\" var fullRedaction = redactor.RedactDate(date); // returns // en-NZ: \"*********\" // en-US: \"********\" // ja-JP: \"*********\" // InvariantCulture: \"*********\" var allOptions = new DateRedactorOptions { RedactorType = DateRedaction.All }; var allRedaction = redactor.RedactDate(date, allOptions); // returns // en-NZ: \"********\" // en-US: \"********\" // ja-JP: \"********\" // InvariantCulture: \"********\" var fixedLengthOptions = new DateRedactorOptions { RedactorType = DateRedaction.FixedLength }; var fixedLengthRedaction = redactor.RedactDate(date, fixedLengthOptions); // returns // en-NZ: \"**/06/2023\" // en-US: \"6/**/2023\" // ja-JP: \"2023/06/**\" // InvariantCulture: \"06/**/2023\" var dayOptions = new DateRedactorOptions { RedactorType = DateRedaction.Day }; var dayRedaction = redactor.RedactDate(date, dayOptions); // returns // en-NZ: \"15/**/2023\" // en-US: \"*/15/2023\" // ja-JP: \"2023/**/15\" // InvariantCulture: \"**/15/2023\" var monthOptions = new DateRedactorOptions { RedactorType = DateRedaction.Month }; var monthRedaction = redactor.RedactDate(date, monthOptions); // returns // en-NZ: \"15/06/****\" // en-US: \"6/15/****\" // ja-JP: \"****/06/15\" // InvariantCulture: \"06/15/****\" var yearOptions = new DateRedactorOptions { RedactorType = DateRedaction.Year }; var yearRedaction = redactor.RedactDate(date, yearOptions); // returns // en-NZ: \"**/**/2023\" // en-US: \"*/**/2023\" // ja-JP: \"2023/**/**\" // InvariantCulture: \"**/**/2023\" var dayAndMonthOptions = new DateRedactorOptions { RedactorType = DateRedaction.DayAndMonth }; var dayAndMonthRedaction = redactor.RedactDate(date, dayAndMonthOptions); // returns // en-NZ: \"15/**/****\" // en-US: \"*/15/****\" // ja-JP: \"****/**/15\" // InvariantCulture: \"**/15/****\" var monthAndYearOptions = new DateRedactorOptions { RedactorType = DateRedaction.DayAndMonth }; var monthAndYearRedaction = redactor.RedactDate(date, monthAndYearOptions); // returns // en-NZ: \"**/06/****\" // en-US: \"6/**/****\" // ja-JP: \"****/06/**\" // InvariantCulture: \"06/**/****\" var dayAndYearOptions = new DateRedactorOptions { RedactorType = DateRedaction.DayAndYear }; var dayAndYearRedaction = redactor.RedactDate(date, dayAndYearOptions);"
  },
  "docfx/redactorTypes/emailaddress.html": {
    "href": "docfx/redactorTypes/emailaddress.html",
    "title": "Email Address | ZeroRedact",
    "keywords": "Email Address The following show examples of all the email address redactor types: var redactor = new Redactor(); var emailAddress = \"email@example.com\"; // Uses the default redactor (Full) // returns \"*****@*******.***\" var fullRedaction = redactor.RedactEmailAddress(emailAddress); // returns \"*****************\" var allOptions = new EmailAddressRedactorOptions { RedactorType = EmailAddressRedaction.All }; var allRedaction = redactor.RedactEmailAddress(emailAddress, allOptions); // returns \"********\" var fixedLengthOptions = new EmailAddressRedactorOptions { RedactorType = EmailAddressRedaction.FixedLength }; var fixedLengthRedaction = redactor.RedactEmailAddress(emailAddress, fixedLengthOptions); // returns \"*****@example.com\" var usernameOptions = new EmailAddressRedactorOptions { RedactorType = EmailAddressRedaction.Username }; var usernameRedaction = redactor.RedactEmailAddress(emailAddress, usernameOptions); // returns \"***il@example.com\" var firstHalfUsernameOptions = new EmailAddressRedactorOptions { RedactorType = EmailAddressRedaction.FirstHalfUsername }; var firstHalfUsernameRedaction = redactor.RedactEmailAddress(emailAddress, firstHalfUsernameOptions); // returns \"em*********le.com\" var middleOptions = new EmailAddressRedactorOptions { RedactorType = EmailAddressRedaction.Middle }; var middleRedaction = redactor.RedactEmailAddress(emailAddress, middleOptions); // returns \"e***l@example.com\" var mostUsernameOptions = new EmailAddressRedactorOptions { RedactorType = EmailAddressRedaction.MostUsername }; var mostUsernameRedaction = redactor.RedactEmailAddress(emailAddress, mostUsernameOptions); // returns \"e****@e******.com\" var showFirstCharactersOptions = new EmailAddressRedactorOptions { RedactorType = EmailAddressRedaction.ShowFirstCharacters }; var showFirstCharactersRedaction = redactor.RedactEmailAddress(emailAddress, showFirstCharactersOptions);"
  },
  "docfx/redactorTypes/ipv4address.html": {
    "href": "docfx/redactorTypes/ipv4address.html",
    "title": "IPv4 Address | ZeroRedact",
    "keywords": "IPv4 Address The following show examples of all the IPv4 address redactor types: var redactor = new Redactor(); var ipv4Address = \"192.0.2.146\"; // Uses default redactor (Full) // returns \"***.*.*.***\" var fullRedaction = redactor.RedactIPv4Address(ipv4Address); // returns \"***********\" var allOptions = new IPv4RedactorOptions { RedactorType = IPv4AddressRedaction.All }; var allRedaction = redactor.RedactIPv4Address(ipv4Address, allOptions); // returns \"********\" var fixedLengthOptions = new IPv4RedactorOptions { RedactorType = IPv4AddressRedaction.FixedLength }; var fixedLengthRedaction = redactor.RedactIPv4Address(ipv4Address, fixedLengthOptions); // returns \"***.*.*.146\" var showLastOctetOptions = new IPv4RedactorOptions { RedactorType = IPv4AddressRedaction.ShowLastOctet }; var showLastOctetRedaction = redactor.RedactIPv4Address(ipv4Address, showLastOctetOptions);"
  },
  "docfx/redactorTypes/ipv6address.html": {
    "href": "docfx/redactorTypes/ipv6address.html",
    "title": "IPv6 Address | ZeroRedact",
    "keywords": "IPv6 Address The following show examples of all the IPv6 address redactor types: var redactor = new Redactor(); var ipv6Address = \"2001:0000:130F:0000:0000:09C0:876A:130B\"; // Uses default redactor (Full) // returns \"****:****:****:****:****:****:****:****\" var fullRedaction = redactor.RedactIPv6Address(ipv6Address); // returns \"***************************************\" var allOptions = new IPv6RedactorOptions { RedactorType = IPv6AddressRedaction.All }; var allRedaction = redactor.RedactIPv6Address(ipv6Address, allOptions); // returns \"********\" var fixedLengthOptions = new IPv6RedactorOptions { RedactorType = IPv6AddressRedaction.FixedLength }; var fixedLengthRedaction = redactor.RedactIPv6Address(ipv6Address, fixedLengthOptions); // returns \"****:****:****:****:****:****:****:130B\" var showLastQuartetOptions = new IPv6RedactorOptions { RedactorType = IPv6AddressRedaction.ShowLastQuartet }; var showLastQuartetRedaction = redactor.RedactIPv6Address(ipv4Address, showLastQuartetOptions);"
  },
  "docfx/redactorTypes/macaddress.html": {
    "href": "docfx/redactorTypes/macaddress.html",
    "title": "MAC Address | ZeroRedact",
    "keywords": "MAC Address The following show examples of all the MAC address redactor types: var redactor = new Redactor(); var macAddress = \"00:B0:D0:63:C2:26\"; // Uses default redactor (Full) // returns \"****:****:****:****:****:****:****:****\" var fullRedaction = redactor.RedactMACAddress(macAddress); // returns \"***************************************\" var allOptions = new MACAddressRedactorOptions { RedactorType = MACAddressRedaction.All }; var allRedaction = redactor.RedactMACAddress(macAddress, allOptions); // returns \"********\" var fixedLengthOptions = new MACAddressRedactorOptions { RedactorType = MACAddressRedaction.FixedLength }; var fixedLengthRedaction = redactor.RedactMACAddress(macAddress, fixedLengthOptions); // returns \"****:****:****:****:****:****:****:130B\" var showLastByteOptions = new MACAddressRedactorOptions { RedactorType = MACAddressRedaction.ShowLastByte }; var showLastByteRedaction = redactor.RedactMACAddress(macAddress, showLastByteOptions);"
  },
  "docfx/redactorTypes/phonenumber.html": {
    "href": "docfx/redactorTypes/phonenumber.html",
    "title": "Phone Number | ZeroRedact",
    "keywords": "Phone Number The following show examples of all the phone number redactor types: var redactor = new Redactor(); var phoneNumber = \"212-456-7890\"; // Uses default redactor (Full) // returns \"***-***-****\" var fullRedaction = redactor.RedactPhoneNumber(phoneNumber); // returns \"************\" var allOptions = new PhoneNumberRedactorOptions { RedactorType = PhoneNumberRedaction.All }; var allRedaction = redactor.RedactPhoneNumber(phoneNumber, allOptions); // returns \"********\" var fixedLengthOptions = new PhoneNumberRedactorOptions { RedactorType = PhoneNumberRedaction.FixedLength }; var fixedLengthRedaction = redactor.RedactPhoneNumber(phoneNumber, fixedLengthOptions); // returns \"***-***-7890\" var showLastFourOptions = new PhoneNumberRedactorOptions { RedactorType = PhoneNumberRedaction.ShowLastFour }; var showLastFourRedaction = redactor.RedactPhoneNumber(phoneNumber, showLastFourOptions);"
  },
  "docfx/redactorTypes/redactor.html": {
    "href": "docfx/redactorTypes/redactor.html",
    "title": "Redactor | ZeroRedact",
    "keywords": "Redactor Redactor is the root object for ZeroRedact. It exposes the various methods to redact specific types of sensitive information. Configuration It's simple to use and defaults to having * as a redaction character. var redactor = new Redactor(); Base redaction characters, and fixed length redaction length can be configured via the RedactorOptions struct. var options = new RedactorOptions { FixedLengthSize = 5, RedactionCharacter = 'X' }; var redactor = new Redactor(options); Each method that deals with a specific type of sensitive information can also be configured at the Redactor level. This allows for your own defaults to be setup at object creation time: // Options will only apply to RedactEmailAddress() calls var options = new RedactorOptions { EmailAddressRedactorOptions = new EmailAddressRedactorOptions { RedactionCharacter = 'X' } }; var redactor = new Redactor(options); All redactor options can be configured here: var options = new RedactorOptions { RedactionCharacter = 'O', FixedLengthSize = 10, StringRedactorOptions = new StringRedactorOptions { RedactionCharacter = 'X', FixedLengthSize = 5, RedactorType = StringRedaction.FixedLength }, EmailAddressRedactorOptions = new EmailAddressRedactorOptions { RedactionCharacter = 'X', FixedLengthSize = 6, RedactorType = EmailAddressRedaction.ShowFirstCharacters }, CreditCardRedactorOptions = new CreditCardRedactorOptions { RedactionCharacter = '&', FixedLengthSize = 7, RedactorType = CreditCardRedaction.ShowFirstSixLastFour }, DateRedactorOptions = new DateRedactorOptions { RedactionCharacter = '-', FixedLengthSize = 8, RedactorType = DateRedaction.DayAndYear }, PhoneNumberRedactorOptions = new PhoneNumberRedactorOptions { RedactionCharacter = '#', FixedLengthSize = 9, RedactorType = PhoneNumberRedaction.ShowLastFour }, IPv4RedactorOptions = new IPv4RedactorOptions { RedactionCharacter = '!', FixedLengthSize = 11, RedactorType = IPv4AddressRedaction.Full }, IPv6RedactorOptions = new IPv6RedactorOptions { RedactionCharacter = '^', FixedLengthSize = 12, RedactorType = IPv6AddressRedaction.All }, MACAddressRedactorOptions = new MACAddressRedactorOptions { RedactionCharacter = '?', FixedLengthSize = 13, RedactorType = MACAddressRedaction.ShowLastByte } };"
  },
  "docfx/redactorTypes/string.html": {
    "href": "docfx/redactorTypes/string.html",
    "title": "String | ZeroRedact",
    "keywords": "String The following show examples of all the string redactor types: var redactor = new Redactor(); var sensitiveInfo = \"Hello, world!\"; // Uses the default redactor (All) // returns \"*************\" var allRedaction = redactor.RedactString(sensitiveInfo); // returns \"********\" var fixedLengthOptions = new StringRedactorOptions { RedactorType = StringRedaction.FixedLength }; var fixedLengthRedaction = redactor.RedactString(sensitiveInfo, fixedLengthOptions); // returns \"*******world!\" var firstHalfOptions = new StringRedactorOptions { RedactorType = StringRedaction.FirstHalf }; var firstHalfRedaction = redactor.RedactString(sensitiveInfo, firstHalfOptions); // returns \"Hello,******* var secondHalfOptions = new StringRedactorOptions { RedactorType = StringRedaction.SecondHalf }; var secondHalfRedaction = redactor.RedactString(sensitiveInfo, secondHalfOptions); // returns \"******, *****!\" var ignoreSymbolsOptions = new StringRedactorOptions { RedactorType = StringRedaction.IgnoreSymbols }; var ignoreSymbolsRedaction = redactor.RedactString(sensitiveInfo, ignoreSymbolsOptions)"
  },
  "index.html": {
    "href": "index.html",
    "title": "Quick Start | ZeroRedact",
    "keywords": "Quick Start Redact your sensitive data with ZeroRedact. ZeroRedact fully or partially redacts various formats of sensitive data quickly and easily. Install via NuGet Either with the NuGet Package Manager UI or via: dotnet add package Nikouu.ZeroRedact First redaction Create the Redactor object, and use a method fitting for your sensitive data: var redactor = new Redactor(); // returns \"*************\" var result = redactor.RedactString(\"Personal data\"); Redacting with options To customise the redaction, use the respective options object for the redaction type: var redactor = new Redactor(); var options = new StringRedactorOptions { RedactorType = StringRedaction.SecondHalf, RedactionCharacter = '#' }; // returns \"Person#######\" var result = redactor.RedactString(\"Personal data\", options);"
  }
}